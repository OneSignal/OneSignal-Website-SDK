# Basic Test

Here is a basic test file template.

```ts
import { TestEnvironment } from '../../support/environment/TestEnvironment';

// mock an entire file
vi.mock('../../../src/MyFile');

describe('My tests', () => {
  beforeEach(() => {
    vi.useFakeTimers();
    TestEnvironment.initialize();
  });

  afterEach(() => {
    vi.resetAllMocks();
  });

  test('This is a test description', () => {});
});
```

# Common Usages

## Suppress Internal Logging

Your test may result in an error being printed but the test still succeeds. To suppress logs, you can mock the entire Log file.

```ts
// suppress all internal logging
vi.mock('../../../src/shared/libraries/Log');
```

# Jest Customizations

This directory includes changes used for extending Jest to do things like stub and spy on private functions.

Followed instructions from [here](https://spin.atomicobject.com/2020/01/30/jest-add-custom-functions/).

To add more custom testing functions, add them to `jest/jest.setupt.ts` and `jest.d.ts`.

## API

### `nock`

Mocks all HTTP requests by leveraging msw. If omitted, the status defaults to 200.

```ts
import { server } from '__test__/support/mocks/server';
import { http, HttpResponse } from 'msw';

server.use(
  http.get('https://api.onesignal.com/v1/notifications', () =>
    HttpResponse.json({ result: {}, status: 200 }),
  ),
);

// or

server.use(
  http.get('**/v1/notifications', () =>
    HttpResponse.json({ result: {}, status: 200 }),
  ),
);
```
